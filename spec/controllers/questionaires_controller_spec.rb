require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe QuestionairesController, type: :controller do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # QuestionairesController. Be sure to keep this updated too.
  let(:valid_attributes) {
    {
      user_id: @user.id,
      workshop_id: @workshop.id
    }
  }

  describe "GET #show" do
    before do
      login_with :user
    end

    it "assigns the requested questionaire as @questionaire" do
      @user = FactoryGirl.create(:user)
      @workshop = FactoryGirl.create(:workshop)
      @questionaire = FactoryGirl.create(:questionaire)
      @registration = FactoryGirl.create(:registration,
                                         user: @user,
                                         workshop: @workshop,
                                         questionaire: @questionaire)

      get :show, valid_attributes

      expect(assigns(:questionaire)).to eq(@questionaire)
    end
  end
end
